/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package display;

import java.io.IOException;

import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import display.listener.EventContainer;
import display.listener.WizardAction;
import display.listener.WizardEvent;
import display.listener.WizardEventEmitter;
import display.listener.WizardListener;

public class NewProjectWindow extends JDialog {

	private static final long serialVersionUID = 1L;
	private WizardEventEmitter we;
	private JFileChooser chooser;

	public NewProjectWindow(java.awt.Frame parent, boolean modal) {
		super(parent, modal);

		initComponents();

		chooser = new JFileChooser();
		we = new WizardEventEmitter();

		resetWindow();

		this.setLocationRelativeTo(null);
	}

	public void addListener(WizardListener l) {
		we.addListener(l);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		closeButton = new javax.swing.JButton();
		validButton = new javax.swing.JButton();
		labelXml = new javax.swing.JLabel();
		labelDirectory = new javax.swing.JLabel();
		inputXml = new javax.swing.JTextField();
		browseXmlButton = new javax.swing.JButton();
		inputDirectory = new javax.swing.JTextField();
		browseDirectoryButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("New File");

		closeButton.setText("Cancel");
		closeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				setVisible(false);
				resetWindow();
			}
		});

		validButton.setText("Ok");
		validButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				validForm();
			}
		});

		labelXml.setText("Xml destination:");

		labelDirectory.setText("File directory:");

		browseXmlButton.setText("Browse");
		browseXmlButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				askSaveXml();
			}
		});

		browseDirectoryButton.setText("Browse");
		browseDirectoryButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						askImageDirectory();
					}
				});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.TRAILING)
												.addGroup(
														layout.createSequentialGroup()
																.addGap(0,
																		0,
																		Short.MAX_VALUE)
																.addComponent(
																		validButton))
												.addGroup(
														javax.swing.GroupLayout.Alignment.LEADING,
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(
																						labelXml)
																				.addComponent(
																						labelDirectory))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(
																						inputXml,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						227,
																						Short.MAX_VALUE)
																				.addComponent(
																						inputDirectory))))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
																.addComponent(
																		closeButton)
																.addComponent(
																		browseXmlButton))
												.addComponent(
														browseDirectoryButton))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.BASELINE)
																				.addComponent(
																						inputXml,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addComponent(
																						browseXmlButton))
																.addGap(0,
																		0,
																		Short.MAX_VALUE))
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		labelXml)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.BASELINE)
																				.addComponent(
																						labelDirectory)
																				.addComponent(
																						inputDirectory,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addComponent(
																						browseDirectoryButton))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		207,
																		Short.MAX_VALUE)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.BASELINE)
																				.addComponent(
																						closeButton)
																				.addComponent(
																						validButton))))
								.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void validForm() {
		if (inputXml.getText().length() == 0) {
			JOptionPane.showMessageDialog(null, "You must select a xml file.");
			return;
		}

		if (inputDirectory.getText().length() == 0) {
			JOptionPane.showMessageDialog(null,
					"You must select a directory for pictures.");
			return;
		}

		EventContainer ec = new EventContainer();
		ec.addArg("xml", inputXml.getText());
		ec.addArg("directory", inputDirectory.getText());
		we.fireEvent(new WizardEvent(WizardAction.NewProject, ec));

		this.setVisible(false);
	}

	private void askSaveXml() {
		chooser.setDialogTitle("Choose a destination file");
		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		chooser.setAcceptAllFileFilterUsed(false);

		if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			String s = "-1";
			try {
				s = chooser.getSelectedFile().getCanonicalPath();
				this.inputXml.setText(s);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private void askImageDirectory() {
		chooser.setDialogTitle("Choose a directory to explore");
		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		chooser.setAcceptAllFileFilterUsed(false);

		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			String s = chooser.getCurrentDirectory().getAbsolutePath();
			this.inputDirectory.setText(s);
		}
	}

	private void resetWindow() {
		inputXml.setText("");
		inputDirectory.setText("");
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton closeButton;
	private javax.swing.JButton validButton;
	private javax.swing.JButton browseXmlButton;
	private javax.swing.JButton browseDirectoryButton;
	private javax.swing.JLabel labelXml;
	private javax.swing.JLabel labelDirectory;
	private javax.swing.JTextField inputXml;
	private javax.swing.JTextField inputDirectory;
	// End of variables declaration//GEN-END:variables
}
